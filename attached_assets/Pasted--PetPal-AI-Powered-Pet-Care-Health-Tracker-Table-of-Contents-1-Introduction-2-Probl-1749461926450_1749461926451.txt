# PetPal â€“ AI-Powered Pet Care & Health Tracker

## Table of Contents

1. Introduction
2. Problem Statement
3. Objectives
4. System Overview
5. Key Features
6. System Architecture
7. Technologies Used
8. Database Design
9. Page-wise Functionality
10. API Integration
11. Security Considerations
12. Implementation Steps
13. Testing Strategy
14. Evaluation Criteria
15. Future Enhancements
16. Conclusion

---

## 1. Introduction

PetPal is a beginner-friendly yet scalable web application that enables pet owners to manage and monitor their pet's daily care, health activities, and receive breed-specific AI-generated tips. It simplifies pet ownership by digitizing records, automating reminders, and offering intelligent care suggestions.

## 2. Problem Statement

Many pet owners lack an efficient and centralized system to maintain vaccination schedules, dietary needs, and routine tasks for their pets. Most solutions are manual or fragmented across apps. PetPal addresses this by providing a unified, intelligent platform.

## 3. Objectives

* To provide a central platform for pet care and health record management
* To offer AI-generated care suggestions tailored to breed and health data
* To support multi-pet profiles, reminders, checklists, and growth tracking
* To build a responsive, user-friendly, and secure full-stack web application

## 4. System Overview

PetPal is built using Python (Flask) for the backend, PostgreSQL for database management, and HTML/CSS/JS with Bootstrap for the frontend. It integrates OpenRouter API to dynamically generate care suggestions based on pet breed.

## 5. Key Features

* **Pet Profile Management:** Add, edit, and delete pet profiles with photo upload.
* **Health Record Tracking:** Log vaccinations, vet visits, medications, and visualize weight trends.
* **Reminders & Checklists:** Set reminders and manage daily/weekly care tasks.
* **AI Care Tips:** Receive personalized care recommendations using OpenRouter.
* **User Authentication:** Secure login and session handling per user.

## 6. System Architecture

```
User Interface (HTML/CSS/Bootstrap)
       |
Flask Web Server (Python)
       |
PostgreSQL Database <---> OpenRouter API
```

## 7. Technologies Used

| Layer    | Technology                         |
| -------- | ---------------------------------- |
| Frontend | HTML, CSS, JavaScript, Bootstrap 5 |
| Backend  | Python, Flask                      |
| Database | PostgreSQL, SQLAlchemy             |
| API & AI | OpenRouter API                     |
| Tools    | GitHub, Postman, VS Code, Chart.js |

## 8. Database Design

### Tables:

* **Users:** id, name, email, password\_hash
* **Pets:** id, user\_id, name, breed, species, age, weight, photo\_path
* **HealthRecords:** id, pet\_id, type (vaccination/medication), description, date
* **Reminders:** id, pet\_id, task\_name, schedule\_time, is\_recurring
* **Tasks:** id, pet\_id, task\_name, is\_done, created\_at

(Relationships are one-to-many: A user has many pets, a pet has many health records/tasks/reminders)

## 9. Page-wise Functionality

| Page              | Features                                                               |
| ----------------- | ---------------------------------------------------------------------- |
| Home              | Welcome message, Login/Register CTA                                    |
| Register/Login    | Secure authentication and session tracking                             |
| Dashboard         | Overview of pets and upcoming reminders                                |
| Add/Edit Pet      | Forms to input pet details and upload photos                           |
| Pet Detail        | Full view of pet info + buttons to access records, tips, and checklist |
| Health Records    | Log/view vaccines, medications, and display weight charts              |
| Checklist         | Add/edit daily tasks and mark them complete                            |
| Care Tips         | AI-generated tips per breed from OpenRouter API                        |
| Reminder Settings | Set and view recurring care reminders                                  |
| Logout            | End session and redirect to home                                       |

## 10. API Integration

* **OpenRouter API:** Used to fetch breed-specific suggestions
* **Usage:** API called with pet breed as input and care context (e.g., grooming, diet)
* **Storage:** API key stored securely in `.env` file and accessed via environment variables

## 11. Security Considerations

* Passwords hashed using Bcrypt
* Input validation (both client and server-side)
* API keys protected in environment variables
* Session management to track logged-in users

## 12. Implementation Steps

1. **Environment Setup:** Flask, PostgreSQL, SQLAlchemy, and dependencies
2. **Flask App Structure:** Base routes, templates, blueprints
3. **User Auth:** Register, login, logout with session tracking
4. **Database Models:** Define and migrate tables using SQLAlchemy
5. **Pet Profile Features:** CRUD for pet data and photo uploads
6. **Health Tracking:** Add/view/edit records and plot weight data
7. **Reminder System:** Store and display recurring reminders
8. **Checklist:** Create and update task lists with timestamps
9. **AI Integration:** Use OpenRouter to fetch and display care tips
10. **UI/UX:** Style using Bootstrap and responsive design
11. **Testing & Debugging:** Use Postman and pytest
12. **Deployment:** Deploy to platforms like Render or Railway

## 13. Testing Strategy

* Unit Testing for routes and DB models (pytest)
* Manual testing via browser and Postman
* Boundary testing for form inputs
* Responsive testing on mobile and tablet

## 14. Evaluation Criteria

| Category               | Weight |
| ---------------------- | ------ |
| Functional Features    | 40%    |
| AI Integration         | 20%    |
| UI/UX & Responsiveness | 15%    |
| Code Quality           | 10%    |
| Database Design        | 5%     |
| Documentation & Demo   | 10%    |

## 15. Future Enhancements

* Email/SMS reminder notifications
* Pet activity tracker via wearable integration
* Mobile app version using React Native
* Integration with veterinary clinic APIs
* Role-based admin dashboard for pet service providers

## 16. Conclusion

PetPal is a thoughtfully crafted web application that bridges technology with responsible pet care. It not only streamlines routine management but also empowers pet owners with smart, AI-driven insights to improve their pet's health and happiness.

---

**Project by:** \[Your Name]
**Mentor:** \[Faculty Name]
**Department:** \[Your Department]
**Year:** 2025
